apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "com.example.android.architecture.blueprints.todomvp"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildTypes {
    debug {
      // Minifying the variant used for tests is not supported when using Jack.
      minifyEnabled false
      // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
      useProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
    }

    release {
      minifyEnabled true
      useProguard true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
    }
  }

  flavorDimensions "default"

  // If you need to add more flavors, consider using flavor dimensions.
  productFlavors {
    mock {
      applicationIdSuffix = ".mock"
    }
    prod {}
  }

  // Remove mockRelease as it's not needed.
  android.variantFilter { variant ->
    if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
      variant.setIgnore(true)
    }
  }

  lintOptions {
    warning 'InvalidPackage' // prevent error from references of non-Android package
  }

  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  // App's dependencies, including test
  implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:design:$rootProject.supportLibraryVersion"
  implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
  implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"
  implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjavaVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"
  implementation "com.squareup.sqlbrite2:sqlbrite:$rootProject.sqlbriteVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.rxBindingVersion"
  implementation "android.arch.lifecycle:runtime:$rootProject.archComponentsVersion"
  implementation "android.arch.lifecycle:extensions:$rootProject.archComponentsVersion"
  implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.rxKotlinVersion"
  kapt "android.arch.lifecycle:compiler:$rootProject.archComponentsVersion"

  // Dependencies for local unit tests
  testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
  testImplementation "junit:junit:$rootProject.junitVersion"
  testImplementation "org.mockito:mockito-all:$rootProject.mockitoVersion"
  testImplementation "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"

  // Android Testing Support Library's runner and rules
  androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
  androidTestImplementation "com.android.support.test:rules:$rootProject.runnerVersion"

  // Dependencies for Android unit tests
  androidTestImplementation "junit:junit:$rootProject.junitVersion"
  androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
  androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
  androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

  // Espresso UI Testing
  androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"

  // Resolve conflicts between main and test APK:
  androidTestImplementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
  androidTestImplementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
  androidTestImplementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
  androidTestImplementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
  androidTestImplementation "com.android.support:design:$rootProject.supportLibraryVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
  //  resolutionStrategy.force "com.android.support:support-annotations:$rootProject.ext.lib.supportLibraryVersion"
  resolutionStrategy.force "com.google.code.findbugs:jsr305:$rootProject.jsr305Version"
}